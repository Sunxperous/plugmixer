// Generated by CoffeeScript 1.7.1
'use strict';
var ANIMATION_DURATION, OPACITY, SHIFT_LEFT, Selection, activePlaylists, hideAnimation, inputting, playlistsLi, sameEnabledPlaylists, selections, showAnimation, tabId, updateActivePlaylists,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

OPACITY = '0.3';

SHIFT_LEFT = '-63px';

ANIMATION_DURATION = 256;

tabId = null;

selections = {};

activePlaylists = null;

Selection = (function() {
  function Selection(selectionId, storageData, existing) {
    this.selectionId = selectionId;
    this.clickSelection = __bind(this.clickSelection, this);
    this.remove = __bind(this.remove, this);
    this.playlists = storageData.splice(1, storageData.length - 1);
    this.dom = $('.template').clone();
    this.name = storageData[0];
    this.addToList(existing);
  }

  Selection.prototype.addToList = function(existing) {
    this.dom.children('.name').text(this.name);
    this.dom.removeClass('template');
    this.dom.children('.playlists').html(playlistsLi(this.playlists));
    if (this.sameEnabledPlaylists()) {
      this.highlight();
    }
    if (existing) {
      $('#list').append(this.dom);
    } else {
      $('.template').after(this.dom);
    }
    showAnimation(this.dom);
    return this.dom.click(this.selectionId, this.clickSelection);
  };

  Selection.prototype.remove = function() {
    return this.dom.remove();
  };

  Selection.prototype.highlight = function(solo) {
    if (solo == null) {
      solo = false;
    }
    if (solo) {
      $('.selection').removeClass('inUse');
    }
    return this.dom.addClass('inUse');
  };

  Selection.prototype.clickSelection = function(event) {
    if (event.target.className === 'delete') {
      return chrome.tabs.sendMessage(tabId, {
        about: 'plugmixer_delete_selection',
        selectionId: event.data
      }, (function(_this) {
        return function(response) {
          if (response === 'plugmixer_selection_deleted') {
            return hideAnimation(_this.dom, _this.remove);
          }
        };
      })(this));
    } else {
      chrome.tabs.sendMessage(tabId, {
        about: 'plugmixer_choose_selection',
        selectionId: event.data
      });
      this.highlight(true);
      return updateActivePlaylists(this.playlists);
    }
  };

  Selection.prototype.sameEnabledPlaylists = function() {
    return $(this.playlists).not(activePlaylists).length === 0 && $(activePlaylists).not(this.playlists).length === 0;
  };

  return Selection;

})();

showAnimation = function(element, callback) {
  return element.animate({
    'height': 'show',
    'padding': 'show',
    'opacity': '1'
  }, ANIMATION_DURATION, callback);
};

hideAnimation = function(element, callback) {
  return element.animate({
    'height': 'hide',
    'padding': 'hide',
    'opacity': '0'
  }, ANIMATION_DURATION, callback);
};

playlistsLi = function(playlists) {
  return playlists.map(function(playlist) {
    return '<li>' + playlist + '</li>';
  });
};

updateActivePlaylists = function(playlists) {
  activePlaylists = playlists;
  $('.input .playlists').html(playlistsLi(activePlaylists));
  return $('#number_selected').text(activePlaylists.length);
};

sameEnabledPlaylists = function(storageData, activeData) {
  storageData.splice(0, 1);
  return $(storageData).not(activeData).length === 0 && $(activeData).not(storageData).length === 0;
};

chrome.tabs.query({
  active: true,
  currentWindow: true
}, function(tabs) {
  tabId = tabs[0].id;
  chrome.pageAction.getTitle({
    tabId: tabId
  }, function(result) {
    if (result === 'Plugmixer') {
      $('.toggle').css('left', SHIFT_LEFT);
      return $('.inactive').css('opacity', OPACITY);
    } else {
      return $('.active').css('opacity', OPACITY);
    }
  });
  return chrome.tabs.sendMessage(tabId, 'plugmixer_get_selections', function(response) {
    updateActivePlaylists(response.activePlaylists);
    return chrome.storage.sync.get(response.selections, function(data) {
      var selectionId, _i, _len, _ref, _results;
      _ref = response.selections;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        selectionId = _ref[_i];
        _results.push(selections[selectionId] = new Selection(selectionId, data[selectionId], true));
      }
      return _results;
    });
  });
});

$('#status').click(function(event) {
  return chrome.tabs.sendMessage(tabId, 'plugmixer_toggle_status', function(response) {
    if (response === 'plugmixer_make_active') {
      $('.inactive').animate({
        'opacity': OPACITY,
        'left': SHIFT_LEFT
      });
      return $('.active').animate({
        'opacity': '1',
        'left': SHIFT_LEFT
      });
    } else {
      $('.inactive').animate({
        'opacity': '1',
        'left': '0'
      });
      return $('.active').animate({
        'opacity': OPACITY,
        'left': '0'
      });
    }
  });
});

inputting = 0;

$('#save').click(function(event) {
  if (inputting === 1) {
    $('#save').html('+');
    inputting = 2;
    return hideAnimation($('.input'), function() {
      $('#new').val('');
      return inputting = 0;
    });
  } else if (inputting === 0) {
    $('#save').html('&times;');
    inputting = 1;
    return showAnimation($('.input'), function() {
      return $('#new').focus();
    });
  }
});

$('#new').keyup(function(event) {
  var name;
  if (inputting === 1 && event.keyCode === 13) {
    name = $('#new').val();
    if (name.length > 0) {
      return chrome.tabs.sendMessage(tabId, {
        about: 'plugmixer_save_selection',
        name: name
      }, function(response) {
        if (response.about === 'plugmixer_selection_saved') {
          $('#save').html('+');
          inputting = 2;
          return hideAnimation($('.input'), function() {
            var storageData;
            $('#new').val('');
            inputting = 0;
            storageData = activePlaylists.slice(0);
            storageData.unshift(name);
            return selections = new Selection(response.selectionId, storageData, false);
          });
        }
      });
    }
  }
});
