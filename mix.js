// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var Mixer, waitForAPI;

  Mixer = (function() {
    function Mixer() {}

    Mixer.prototype.playlists = null;

    Mixer.prototype.active = true;

    Mixer.prototype.toggleStatus = function(event) {
      var mixer;
      mixer = event.data;
      mixer.active = !mixer.active;
      if (mixer.active) {
        console.log('Activated Plugmixer.');
        $('#plugmixer_status').children('span').text('Active');
        $('#plugmixer_status').css('background-color', '#90ad2f');
      } else {
        console.log('Deactivated Plugmixer.');
        $('#plugmixer_status').children('span').text('Inactive');
        $('#plugmixer_status').css('background-color', '#c42e3b');
      }
      return mixer.apiEvent();
    };

    Mixer.prototype.mix = function(obj) {
      if (obj.dj.username === API.getUser().username) {
        return this.selectRandomPlaylist();
      }
    };

    Mixer.prototype.apiEvent = function() {
      if (this.active) {
        return API.on(API.DJ_ADVANCE, this.mix, this);
      } else {
        return API.off(API.DJ_ADVANCE, this.mix, this);
      }
    };

    Mixer.prototype.reset = function() {
      var playlist, _i, _len, _ref, _results;
      $('#plugmixer').remove();
      this.active = false;
      this.apiEvent();
      _ref = this.playlists;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        playlist = _ref[_i];
        playlist.dom.children('span.count').off("click", this.togglePlaylistStatus);
        _results.push(playlist.dom.fadeTo(0.3, 1));
      }
      return _results;
    };

    Mixer.prototype.displayLabel = function() {
      var mixerDisplay;
      mixerDisplay = '<div id="plugmixer"\
      style="position: absolute; right: 6px; bottom: 2px; font-size: 11px;">\
        <div style="display: inline-block; background-color: #282c35; padding: 1px 8px; border-radius: 3px 0 0 3px; margin-right: -4px;">\
          <span>PLUGMIXER</span>\
        </div>\
        <div id="plugmixer_status" style="display: inline-block; padding: 1px 4px; background-color: #90ad2f; border-radius: 0 3px 3px 0;\
        font-weight:600; letter-spacing:0.05em; width:60px; text-align:center; cursor: pointer;">\
          <span>Active</span>\
        </div>\
      </div>';
      $('#room').append(mixerDisplay);
      return $('#plugmixer_status').click(this, this.toggleStatus);
    };

    Mixer.prototype.selectedPlaylist = function() {
      var playlist, _i, _len, _ref;
      _ref = this.playlists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        playlist = _ref[_i];
        if (playlist.dom.children('div.activate-button').css('display') === "block") {
          return playlist;
        }
      }
      return null;
    };

    Mixer.prototype.addTriggers = function() {
      var playlist, _i, _len, _ref, _results;
      _ref = this.playlists;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        playlist = _ref[_i];
        _results.push(playlist.dom.children('span.count').click({
          playlists: this.playlists,
          source: playlist
        }, this.togglePlaylistStatus));
      }
      return _results;
    };

    Mixer.prototype.togglePlaylistStatus = function(event) {
      var playlist, playlists;
      playlist = event.data.source;
      playlist.enabled = !playlist.enabled;
      if (playlist.enabled) {
        console.log('Enabled ' + playlist.name + '.');
        playlist.dom.fadeTo(0.3, 1);
      } else {
        console.log('Disabled ' + playlist.name + '.');
        playlist.dom.fadeTo(0.3, 0.4);
      }
      playlists = $.makeArray(event.data.playlists).map(function(p) {
        return {
          name: p.name,
          enabled: p.enabled
        };
      });
      playlists = JSON.stringify(playlists);
      window.postMessage({
        method: 'save',
        playlists: playlists
      }, '*');
    };

    Mixer.prototype.load = function() {};

    Mixer.prototype.activate = function() {
      var _this;
      _this = this;
      console.log('Mixing of playlists initialized!');
      this.loadPlaylists();
      this.addTriggers();
      this.displayLabel();
      return this.apiEvent();
    };

    Mixer.prototype.selectPlaylist = function(playlist) {
      playlist.dom.trigger("mouseup");
      $('.activate-button').click();
      console.log('Next playing from ' + playlist.name + '.');
      API.chatLog('Next playing from ' + playlist.name + '.');
      return playlist;
    };

    Mixer.prototype.enabled = function(index) {
      return this.enabled;
    };

    Mixer.prototype.selectRandomPlaylist = function() {
      var countSum, playlist, playlistCount, weightedSelect, _i, _j, _len, _len1, _ref, _ref1;
      countSum = 0;
      _ref = this.playlists.filter(this.enabled);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        playlist = _ref[_i];
        countSum += playlist.count;
      }
      playlistCount = this.playlists.length;
      weightedSelect = Math.floor(Math.random() * countSum) + 1;
      _ref1 = this.playlists.filter(this.enabled);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        playlist = _ref1[_j];
        if (weightedSelect < playlist.count) {
          return this.selectPlaylist(playlist);
        }
        weightedSelect -= playlist.count;
      }
      return null;
    };

    Mixer.prototype.loadPlaylists = function() {
      var playlists, playlistsDom;
      playlistsDom = $('#playlist-menu div.row');
      this.playlists = playlistsDom.map(function(i, pDom) {
        var pJq;
        pJq = $(pDom);
        return {
          name: pJq.children('span.name').text(),
          count: parseInt(pJq.children('span.count').text()),
          enabled: true,
          dom: pJq
        };
      });
      playlists = this.playlists;
      window.postMessage({
        method: 'load'
      }, '*');
      return window.addEventListener("message", function(event) {
        var loaded, playlist, stored, _i, _len, _results;
        if (event.source !== window) {
          return;
        }
        if (event.data.method === 'load_response' && event.data.load) {
          loaded = JSON.parse(event.data.load.playlists);
          console.log(loaded);
          _results = [];
          for (_i = 0, _len = playlists.length; _i < _len; _i++) {
            playlist = playlists[_i];
            _results.push((function() {
              var _j, _len1, _results1;
              _results1 = [];
              for (_j = 0, _len1 = loaded.length; _j < _len1; _j++) {
                stored = loaded[_j];
                if (playlist.name === stored.name && !stored.enabled) {
                  playlist.enabled = stored.enabled;
                  _results1.push(playlist.dom.fadeTo(0.3, 0.4));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        }
      });
    };

    return Mixer;

  })();

  waitForAPI = function() {
    var mixer;
    if ((typeof $ !== "undefined" && $ !== null) && $('#playlist-menu div.row').length !== 0) {
      if (typeof mixer !== "undefined" && mixer !== null) {
        mixer.reset();
      }
      mixer = new Mixer;
      return mixer.activate();
    } else {
      return setTimeout(waitForAPI, 256);
    }
  };

  waitForAPI();

}).call(this);
