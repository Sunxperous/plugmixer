// Generated by CoffeeScript 1.7.1
var Mixer, mixer;

Mixer = (function() {
  function Mixer() {}

  Mixer.prototype.playlists = null;

  Mixer.prototype.selectedPlaylist = function() {
    var playlist, _i, _len, _ref;
    _ref = this.playlists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      playlist = _ref[_i];
      if (playlist.dom.children('div.activate-button').css('display') === "block") {
        return playlist;
      }
    }
    return null;
  };

  Mixer.prototype.activate = function() {
    var _this;
    _this = this;
    console.log('Mixing of playlists initialized!');
    this.loadPlaylists();
    API.off(API.DJ_ADVANCE, null);
    return API.on(API.DJ_ADVANCE, function(obj) {
      if (obj.dj.username === API.getUser().username) {
        return _this.selectRandomPlaylist();
      }
    });
  };

  Mixer.prototype.selectPlaylist = function(playlist) {
    playlist.dom.trigger("mouseup");
    $('.activate-button').click();
    console.log('New playlist ' + playlist.name + ' activated!');
    API.chatLog('Next playing from ' + playlist.name + '.');
    return playlist;
  };

  Mixer.prototype.selectRandomPlaylist = function() {
    var countSum, playlist, playlistCount, weightedSelect, _i, _j, _len, _len1, _ref, _ref1;
    countSum = 0;
    _ref = this.playlists;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      playlist = _ref[_i];
      countSum += playlist.count;
    }
    playlistCount = this.playlists.length;
    weightedSelect = Math.floor(Math.random() * countSum) + 1;
    _ref1 = this.playlists;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      playlist = _ref1[_j];
      if (weightedSelect < playlist.count) {
        return this.selectPlaylist(playlist);
      }
      weightedSelect -= playlist.count;
    }
    return null;
  };

  Mixer.prototype.loadPlaylists = function() {
    var playlistsDom;
    playlistsDom = $('#playlist-menu div.row');
    return this.playlists = playlistsDom.map(function(i, pDom) {
      var pJq;
      pJq = $(pDom);
      return {
        name: pJq.children('span.name').text(),
        count: parseInt(pJq.children('span.count').text()),
        dom: pJq
      };
    });
  };

  return Mixer;

})();

mixer = new Mixer;

mixer.activate();
